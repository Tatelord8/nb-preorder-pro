// Script de diagn√≥stico para p√°ginas en blanco
console.log("üîç DIAGN√ìSTICO DE P√ÅGINAS EN BLANCO");
console.log("====================================");

window.diagnosticarPaginasBlancas = async () => {
  try {
    console.log("üîç Iniciando diagn√≥stico de p√°ginas en blanco...");

    // 1. Verificar errores de JavaScript en consola
    console.log("\nüîç 1. Verificando errores de JavaScript...");
    const originalError = console.error;
    const errors = [];
    
    console.error = (...args) => {
      errors.push(args.join(' '));
      originalError.apply(console, args);
    };

    // 2. Verificar si Supabase est√° disponible
    console.log("\nüîç 2. Verificando Supabase...");
    if (!window.supabase) {
      console.log("‚ùå Supabase no est√° disponible en window");
      return;
    }
    console.log("‚úÖ Supabase disponible");

    // 3. Verificar sesi√≥n
    console.log("\nüîç 3. Verificando sesi√≥n...");
    const { data: { session }, error: sessionError } = await window.supabase.auth.getSession();
    if (sessionError) {
      console.error("‚ùå Error obteniendo sesi√≥n:", sessionError);
      return;
    }
    
    if (!session) {
      console.log("‚ùå No hay sesi√≥n activa");
      return;
    }
    console.log("‚úÖ Sesi√≥n activa:", session.user.email);

    // 4. Verificar componentes cr√≠ticos
    console.log("\nüîç 4. Verificando componentes cr√≠ticos...");
    
    // Verificar si React est√° funcionando
    if (!window.React) {
      console.log("‚ùå React no est√° disponible");
      return;
    }
    console.log("‚úÖ React disponible");

    // Verificar si React Router est√° funcionando
    if (!window.ReactRouterDOM) {
      console.log("‚ùå React Router no est√° disponible");
      return;
    }
    console.log("‚úÖ React Router disponible");

    // 5. Probar SupabaseCartService
    console.log("\nüîç 5. Probando SupabaseCartService...");
    try {
      if (window.SupabaseCartService) {
        const cartItems = await window.SupabaseCartService.getCart(session.user.id);
        console.log("‚úÖ SupabaseCartService funciona:", cartItems.length, "items");
      } else {
        console.log("‚ùå SupabaseCartService no est√° disponible en window");
      }
    } catch (error) {
      console.error("‚ùå Error en SupabaseCartService:", error);
    }

    // 6. Verificar imports cr√≠ticos
    console.log("\nüîç 6. Verificando imports cr√≠ticos...");
    const criticalModules = [
      '@/integrations/supabase/client',
      '@/hooks/useSupabaseCart',
      '@/services/supabase-cart.service',
      '@/components/Layout'
    ];

    for (const module of criticalModules) {
      try {
        // Simular verificaci√≥n de m√≥dulo
        console.log(`‚úÖ M√≥dulo ${module} deber√≠a estar disponible`);
      } catch (error) {
        console.error(`‚ùå Error con m√≥dulo ${module}:`, error);
      }
    }

    // 7. Verificar estado de la aplicaci√≥n
    console.log("\nüîç 7. Verificando estado de la aplicaci√≥n...");
    console.log("‚úÖ URL actual:", window.location.href);
    console.log("‚úÖ User Agent:", navigator.userAgent);
    console.log("‚úÖ Timestamp:", new Date().toISOString());

    // 8. Restaurar console.error original
    console.error = originalError;

    // 9. Resumen
    console.log("\nüìä RESUMEN DEL DIAGN√ìSTICO:");
    console.log(`   - Errores capturados: ${errors.length}`);
    console.log(`   - Supabase: ${window.supabase ? 'Disponible' : 'No disponible'}`);
    console.log(`   - Sesi√≥n: ${session ? 'Activa' : 'Inactiva'}`);
    console.log(`   - React: ${window.React ? 'Disponible' : 'No disponible'}`);
    console.log(`   - React Router: ${window.ReactRouterDOM ? 'Disponible' : 'No disponible'}`);

    if (errors.length > 0) {
      console.log("\n‚ùå ERRORES ENCONTRADOS:");
      errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    } else {
      console.log("\n‚úÖ No se encontraron errores de JavaScript");
    }

    console.log("\nüí° RECOMENDACIONES:");
    console.log("   1. Abre las DevTools (F12) y revisa la pesta√±a Console");
    console.log("   2. Busca errores en rojo que puedan estar causando el problema");
    console.log("   3. Revisa la pesta√±a Network para errores de carga");
    console.log("   4. Verifica que todos los archivos se est√©n cargando correctamente");

  } catch (error) {
    console.error("‚ùå Error inesperado durante el diagn√≥stico:", error);
  }
};

console.log("\nüöÄ FUNCI√ìN DISPONIBLE:");
console.log("   - diagnosticarPaginasBlancas() - Diagnostica p√°ginas en blanco");
console.log("\nüí° Ejecuta: diagnosticarPaginasBlancas()");
