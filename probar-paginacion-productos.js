// Script para probar la paginaci√≥n de productos
console.log("üîç PRUEBA PAGINACI√ìN DE PRODUCTOS");
console.log("=================================");

window.probarPaginacionProductos = async () => {
  try {
    console.log("üîç Probando paginaci√≥n de productos...");
    
    // Verificar si Supabase est√° disponible
    if (typeof window.supabase === 'undefined') {
      console.log("‚ùå Supabase no est√° disponible");
      return;
    }
    
    // Obtener sesi√≥n actual
    const { data: { session }, error: sessionError } = await window.supabase.auth.getSession();
    
    if (sessionError) {
      console.log("‚ùå Error obteniendo sesi√≥n:", sessionError);
      return;
    }
    
    if (!session) {
      console.log("‚ùå No hay sesi√≥n activa");
      return;
    }
    
    console.log("‚úÖ Sesi√≥n activa encontrada");
    console.log("üìß Email:", session.user.email);
    
    // Probar paginaci√≥n
    console.log("\nüîç Probando paginaci√≥n...");
    
    let todosProductos = [];
    let offset = 0;
    const limit = 1000;
    let hasMore = true;
    let pageCount = 0;
    
    while (hasMore) {
      pageCount++;
      console.log(`\nüìÑ P√°gina ${pageCount}: Cargando productos desde ${offset} hasta ${offset + limit - 1}...`);
      
      const { data: productosPage, error: productosError } = await window.supabase
        .from("productos")
        .select("id, sku, nombre, rubro")
        .range(offset, offset + limit - 1);
      
      if (productosError) {
        console.log(`‚ùå Error en p√°gina ${pageCount}:`, productosError.message);
        break;
      }
      
      if (productosPage && productosPage.length > 0) {
        todosProductos = [...todosProductos, ...productosPage];
        console.log(`‚úÖ P√°gina ${pageCount}: Cargados ${productosPage.length} productos`);
        console.log(`üìä Total acumulado: ${todosProductos.length}`);
        
        // Si obtenemos menos productos que el l√≠mite, hemos llegado al final
        if (productosPage.length < limit) {
          hasMore = false;
          console.log(`üèÅ √öltima p√°gina detectada (${productosPage.length} < ${limit})`);
        } else {
          offset += limit;
        }
      } else {
        hasMore = false;
        console.log(`üèÅ No hay m√°s productos en p√°gina ${pageCount}`);
      }
    }
    
    console.log(`\nüìä RESUMEN DE PAGINACI√ìN:`);
    console.log(`   - P√°ginas procesadas: ${pageCount}`);
    console.log(`   - Total productos obtenidos: ${todosProductos.length}`);
    console.log(`   - L√≠mite por p√°gina: ${limit}`);
    
    // Verificar conteos por rubro
    console.log(`\nüîç Verificando conteos por rubro...`);
    
    const calzados = todosProductos.filter(p => p.rubro?.toLowerCase() === 'calzados');
    const prendas = todosProductos.filter(p => p.rubro?.toLowerCase() === 'prendas');
    const otros = todosProductos.filter(p => p.rubro?.toLowerCase() !== 'calzados' && p.rubro?.toLowerCase() !== 'prendas');
    
    console.log(`   - Calzados: ${calzados.length}`);
    console.log(`   - Prendas: ${prendas.length}`);
    console.log(`   - Otros: ${otros.length}`);
    console.log(`   - Total: ${calzados.length + prendas.length + otros.length}`);
    
    // Verificar que no hay duplicados
    const skusUnicos = new Set(todosProductos.map(p => p.sku));
    console.log(`\nüîç Verificando duplicados...`);
    console.log(`   - SKUs √∫nicos: ${skusUnicos.size}`);
    console.log(`   - Total productos: ${todosProductos.length}`);
    
    if (skusUnicos.size === todosProductos.length) {
      console.log(`   ‚úÖ No hay duplicados`);
    } else {
      console.log(`   ‚ö†Ô∏è Hay ${todosProductos.length - skusUnicos.size} duplicados`);
    }
    
    // Comparar con consulta directa
    console.log(`\nüîç Comparando con consulta directa...`);
    
    try {
      const { count: totalCount, error: countError } = await window.supabase
        .from("productos")
        .select("*", { count: "exact", head: true });
      
      if (countError) {
        console.log(`‚ùå Error obteniendo conteo total:`, countError.message);
      } else {
        console.log(`üìä Conteo total desde BD: ${totalCount}`);
        console.log(`üìä Productos obtenidos con paginaci√≥n: ${todosProductos.length}`);
        
        if (totalCount === todosProductos.length) {
          console.log(`‚úÖ ¬°PAGINACI√ìN EXITOSA! Todos los productos fueron obtenidos`);
        } else {
          console.log(`‚ö†Ô∏è Faltan ${totalCount - todosProductos.length} productos`);
        }
      }
    } catch (err) {
      console.log(`‚ùå Excepci√≥n obteniendo conteo total:`, err.message);
    }
    
    console.log("\n‚úÖ PRUEBA DE PAGINACI√ìN COMPLETADA");
    
  } catch (error) {
    console.error("‚ùå Error durante la prueba:", error);
  }
};

console.log("\nüöÄ FUNCI√ìN DISPONIBLE:");
console.log("   - probarPaginacionProductos() - Prueba la paginaci√≥n de productos");
console.log("\nüí° Ejecuta: probarPaginacionProductos()");
